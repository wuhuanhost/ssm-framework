<?xml version="1.0" encoding="UTF-8"?>
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<configuration monitorInterval="5">
	<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->

	<!--变量配置-->
	<Properties>
		<!-- 格式化输出：%date表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %msg：日志消息，%n是换行符-->
		<!-- %logger{36} 表示 Logger 名字最长36个字符 -->
		<property name="LOG_PATTERN" value="%date{HH:mm:ss.SSS} [%thread] %-5level %logger{36}:%l - %msg%n" />
		<!-- 定义日志存储的路径 -->
		<property name="FILE_PATH" value="E://javalogs//" />
		<property name="FILE_NAME" value="think" />
	</Properties>

	<appenders>

		<console name="Console" target="SYSTEM_OUT">
			<!--输出日志的格式-->
			<PatternLayout pattern="${LOG_PATTERN}" />
			<!--控制台只输出level及其以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
			<ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY" />
		</console>

		<!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，适合临时测试用-->
		<File name="Filelog" fileName="${FILE_PATH}/test.log" append="false">
			<PatternLayout pattern="${LOG_PATTERN}" />
		</File>


		<!--处理DEBUG级别的日志，并把该日志放到logs/debug.log文件中-->
		<!--打印出DEBUG级别日志，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
		<RollingFile name="RollingFileDebug" fileName="${FILE_PATH}/debug.log" filePattern="${FILE_PATH}/${FILE_NAME}-DEBUG-%d{yyyy-MM-dd}_%i.log.gz">
			<Filters>
				<ThresholdFilter level="DEBUG" />
				<ThresholdFilter level="DEBUG" onMatch="DENY" onMismatch="NEUTRAL" />
			</Filters>
			<PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss}] %-5level %class{36} %L %M - %msg%xEx%n" />
			<Policies>
				<SizeBasedTriggeringPolicy size="500 MB" />
				<TimeBasedTriggeringPolicy />
			</Policies>
		</RollingFile>

		<!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
		<RollingFile name="RollingFileInfo" fileName="${FILE_PATH}/info.log" filePattern="${FILE_PATH}/${FILE_NAME}-INFO-%d{yyyy-MM-dd}_%i.log.gz">
			<!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
			<ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY" />
			<PatternLayout pattern="${LOG_PATTERN}" />
			<Policies>
				<!--interval属性用来指定多久滚动一次，默认是1 hour-->
				<TimeBasedTriggeringPolicy interval="1" />
				<SizeBasedTriggeringPolicy size="10MB" />
			</Policies>
			<!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
			<DefaultRolloverStrategy max="15" />
		</RollingFile>

		<!-- 这个会打印出所有的warn及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
		<RollingFile name="RollingFileWarn" fileName="${FILE_PATH}/warn.log" filePattern="${FILE_PATH}/${FILE_NAME}-WARN-%d{yyyy-MM-dd}_%i.log.gz">
			<!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
			<ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY" />
			<PatternLayout pattern="${LOG_PATTERN}" />
			<Policies>
				<!--interval属性用来指定多久滚动一次，默认是1 hour-->
				<TimeBasedTriggeringPolicy interval="1" />
				<SizeBasedTriggeringPolicy size="10MB" />
			</Policies>
			<!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
			<DefaultRolloverStrategy max="15" />
		</RollingFile>

		<!-- 这个会打印出所有的error及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
		<RollingFile name="RollingFileError" fileName="${FILE_PATH}/error.log" filePattern="${FILE_PATH}/${FILE_NAME}-ERROR-%d{yyyy-MM-dd}_%i.log.gz">
			<!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
			<ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY" />
			<PatternLayout pattern="${LOG_PATTERN}" />
			<Policies>
				<!--interval属性用来指定多久滚动一次，默认是1 hour-->
				<TimeBasedTriggeringPolicy interval="1" />
				<SizeBasedTriggeringPolicy size="10MB" />
			</Policies>
			<!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
			<DefaultRolloverStrategy max="15" />
		</RollingFile>

		<!--druid的日志记录追加器-->
		<RollingFile name="druidSqlRollingFile" fileName="${FILE_PATH}/druid-sql.log" filePattern="${FILE_PATH}/${FILE_NAME}-api-%d{yyyy-MM-dd}_%i.log.gz">
			<PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss}] %-5level %L %M - %msg%xEx%n" />
			<Policies>
				<SizeBasedTriggeringPolicy size="500 MB" />
				<TimeBasedTriggeringPolicy />
			</Policies>
		</RollingFile>

	</appenders>

	<!--Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。-->
	<!--然后定义loggers，只有定义了logger并引入的appender，appender才会生效-->
	<loggers>

		<root level="INFO">
			<appender-ref ref="Console" />
			<appender-ref ref="Filelog" />
			<appender-ref ref="RollingFileDebug" />
			<appender-ref ref="RollingFileInfo" />
			<appender-ref ref="RollingFileWarn" />
			<appender-ref ref="RollingFileError" />
		</root>

		<!--记录druid-sql的记录-->
		<logger name="druid.sql.Statement" level="debug" additivity="false">
			<appender-ref ref="druidSqlRollingFile" />
		</logger>
		<logger name="druid.sql.Statement" level="debug" additivity="false">
			<appender-ref ref="druidSqlRollingFile" />
		</logger>


		<!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
		<!-- <logger name="org.mybatis" level="INFO" additivity="false">
			<AppenderRef ref="Console" />
		</logger> -->
		<!--监控系统信息-->
		<!--若是additivity设为false，则 子Logger 只会在自己的appender里输出，而不会在 父Logger 的appender里输出。-->
		<!-- <Logger name="org.springframework" level="INFO" additivity="false">
			<AppenderRef ref="Console" />
		</Logger> -->


		<!--log4j2 自带过滤日志-->
		<Logger name="org.apache.catalina.startup.DigesterFactory" level="error" />
		<Logger name="org.apache.catalina.util.LifecycleBase" level="error" />
		<Logger name="org.apache.coyote.http11.Http11NioProtocol" level="warn" />
		<logger name="org.apache.sshd.common.util.SecurityUtils" level="warn" />
		<Logger name="org.apache.tomcat.util.net.NioSelectorPool" level="warn" />
		<Logger name="org.crsh.plugin" level="warn" />
		<logger name="org.crsh.ssh" level="warn" />
		<Logger name="org.eclipse.jetty.util.component.AbstractLifeCycle" level="error" />
		<Logger name="org.hibernate.validator.internal.util.Version" level="warn" />
		<logger name="org.springframework.boot.actuate.autoconfigure.CrshAutoConfiguration" level="warn" />
		<logger name="org.springframework.boot.actuate.endpoint.jmx" level="warn" />
		<logger name="org.thymeleaf" level="warn" />


	</loggers>

</configuration>